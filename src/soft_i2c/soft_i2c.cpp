/**************************************************************************************************
 **************************************************************************************************/
#include "soft_i2c.h"
#include "mcu_configuration.h"
#include "time_service/time_service.h"

namespace soft_i2c
{
    
    using namespace pins;

    // I2C на PB8 (SCL) и PB9 (SDA)

    #define SCLH() { vl53lox_i2c_scl.set(); }
    #define SCLL() { vl53lox_i2c_scl.reset(); }

    #define SDAH() { vl53lox_i2c_sda.set(); }
    #define SDAL() { vl53lox_i2c_sda.reset(); }

    #define SCLread() ( vl53lox_i2c_scl.read() )

    #define SDAread() ( vl53lox_i2c_sda.read() )

    /**************************************************************************************************
                                        ПРОТОТИПЫ ЛОКАЛЬНЫХ ФУНКЦИЙ
    **************************************************************************************************/
    static void I2C_delay( void );

    /**************************************************************************************************
                                            ГЛОБАЛЬНЫЕ ФУНКЦИИ
     **************************************************************************************************/
    /**************************************************************************************************
    Описание:
    Аргументы: Нет
    Возврат:   Нет
    Замечания:
    **************************************************************************************************/
    void init( void )
    {
        vl53lox_i2c_scl.initOutOD();
        vl53lox_i2c_sda.initOutOD();
        
        SDAH();
        SCLH();
    }

    /**************************************************************************************************
    Описание:
    Аргументы: Нет
    Возврат:   Нет
    Замечания:
     **************************************************************************************************/
    bool start( void )
    {
        SDAH();
        SCLH();
        I2C_delay();
        if ( !SDAread() )
            return false;

        SDAL();
        I2C_delay();
        if ( SDAread() )
            return false;

        SDAL();
        I2C_delay();
    
        return true;
    }
    
    /**************************************************************************************************
    Описание:
    Аргументы: Нет
    Возврат:   Нет
    Замечания:
     **************************************************************************************************/
    void stop( void )
    {
        SCLL();
        I2C_delay();
        SDAL();
        I2C_delay();
        SCLH();
        I2C_delay();
        SDAH();
        I2C_delay();
    }
    
    /**************************************************************************************************
    Описание:
    Аргументы: Нет
    Возврат:   Нет
    Замечания:
     **************************************************************************************************/
    void ack( void )
    {
        SCLL();
        I2C_delay();
        SDAL();
        I2C_delay();
        SCLH();
        I2C_delay();
        SCLL();
        I2C_delay();
    }
    
    /**************************************************************************************************
    Описание:
    Аргументы: Нет
    Возврат:   Нет
    Замечания:
     **************************************************************************************************/
    void nack( void )
    {
        SCLL();
        I2C_delay();
        SDAH();
        I2C_delay();
        SCLH();
        I2C_delay();
        SCLL();
        I2C_delay();
    }
    
    /**************************************************************************************************
    Описание:
    Аргументы: Нет
    Возврат:   Нет
    Замечания:
     **************************************************************************************************/
    bool waitAck( void )
    {
        SCLL();
        I2C_delay();
        SDAH();
        I2C_delay();
        SCLH();
        I2C_delay();

        if(SDAread())
        {
            SCLL();
            return false;
        }

        SCLL();

        return true;
    }
    
    /**************************************************************************************************
    Описание:
    Аргументы: Нет
    Возврат:   Нет
    Замечания:
     **************************************************************************************************/
    void sendByte( uint8_t byte )
    {
        uint8_t i = 8;

        while(i--)
        {
            SCLL();
            I2C_delay();
            if( byte & 0x80 )
            {
                SDAH();
            }
            else
            {
                SDAL();
            }
            byte <<= 1;
            I2C_delay();
            SCLH();
            I2C_delay();
        }

        SCLL();
    }
    
    /**************************************************************************************************
    Описание:
    Аргументы: Нет
    Возврат:   Нет
    Замечания:
     **************************************************************************************************/
    uint8_t receiveByte( void )
    {
        uint8_t i = 8;
        uint8_t byte = 0;

        SDAH();
        while ( i-- )
        {
            byte <<= 1;
            SCLL();
            I2C_delay();
            SCLH();
            I2C_delay();
            if( SDAread() )
            {
                byte|=0x01;
            }
        }

        SCLL();
    
        return byte;
    }
    
    /**************************************************************************************************
                                            ЛОКАЛЬНЫЕ ФУНКЦИИ
     **************************************************************************************************/
    /**************************************************************************************************
    Описание:
    Аргументы: Нет
    Возврат:   Нет
    Замечания:
     **************************************************************************************************/
    static void I2C_delay( void )
    { 
        volatile unsigned int i = 15;

        while ( i )
        {
            i--;
        }
    }

} // namespace
